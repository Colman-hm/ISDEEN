/*
 * MPU6050 Triple Axis Gyroscope & Accelerometer. Simple Accelerometer Example.
 * Read more: http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-zyroskop-i-akcelerometr-mpu6050.html
 * GIT: https://github.com/jarzebski/Arduino-MPU6050
 * Web: http://www.jarzebski.pl
 * (c) 2014 by Korneliusz Jarzebski
 * 
 * Right Arduino Nano pin:
 * D4: Button 1
 * D5: Button 2
 */
// MPU Library
#include <Wire.h>
//#include <MPU6050.h>
// RF Library
#include <SPI.h>
#include "RF24.h"
#include <nRF24L01.h>

//MPU6050 mpu;
RF24 radio(7, 8); // CE腳, CSN腳

const int buttonPin1 = 4, buttonPin2 = 5;
int button1State = 0, button2State = 0;

const byte addr[] = "2Node";
const int right = 108; //right module Channel

struct MPU_data
{
  float Name = 2; // 2 represent Right Module
  float Ax = 0;
  float Ay = 0;
  float SW1 = 0; 
  float SW2 = 0;
  //Total 20 bytes
};
MPU_data data;

byte msg[32] = "";

void setup()
{
  Serial.begin(115200);
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  // MPU Setting:
  //Serial.println("Initialize MPU6050");

  /*while (!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G))
  {
    Serial.println("Could not find a valid MPU6050 sensor, check wiring!");
    delay(500);
  }*/

  // If you want, you can set accelerometer offsets
  // mpu.setAccelOffsetX();
  // mpu.setAccelOffsetY();
  // mpu.setAccelOffsetZ();

  // If you want, you can set gyroscope offsets
  // mpu.setGyroOffsetX(155);
  // mpu.setGyroOffsetY(15);
  // mpu.setGyroOffsetZ(15);


  // Calibrate gyroscope. The calibration must be at rest.
  // If you don't want calibrate, comment this line.

  // Set threshold sensivty. Default 3.
  // If you don't want use threshold, comment this line or set 0.

  //mpu.setThreshold(3);
  //mpu.calibrateGyro();
  //checkSettings();

  // RF Settings:
  Serial.println("Initialize NRF24L01");
  radio.begin();
  radio.setChannel(right);       // 設定頻道編號
  radio.openWritingPipe(addr); // 設定通道位址
  radio.setPALevel(RF24_PA_MIN);   // 設定廣播功率
  radio.setDataRate(RF24_250KBPS); // 設定傳輸速率
  radio.stopListening();       // 停止偵聽；設定成發射模式
  Serial.println("nRF24L01 ready to transmit!!");
}

/*void checkSettings()
{
  Serial.println();

  Serial.print(" * Sleep Mode:            ");
  Serial.println(mpu.getSleepEnabled() ? "Enabled" : "Disabled");

  Serial.print(" * Clock Source:          ");
  switch (mpu.getClockSource())
  {
    case MPU6050_CLOCK_KEEP_RESET:     Serial.println("Stops the clock and keeps the timing generator in reset"); break;
    case MPU6050_CLOCK_EXTERNAL_19MHZ: Serial.println("PLL with external 19.2MHz reference"); break;
    case MPU6050_CLOCK_EXTERNAL_32KHZ: Serial.println("PLL with external 32.768kHz reference"); break;
    case MPU6050_CLOCK_PLL_ZGYRO:      Serial.println("PLL with Z axis gyroscope reference"); break;
    case MPU6050_CLOCK_PLL_YGYRO:      Serial.println("PLL with Y axis gyroscope reference"); break;
    case MPU6050_CLOCK_PLL_XGYRO:      Serial.println("PLL with X axis gyroscope reference"); break;
    case MPU6050_CLOCK_INTERNAL_8MHZ:  Serial.println("Internal 8MHz oscillator"); break;
  }

  Serial.print(" * Accelerometer:         ");
  switch (mpu.getRange())
  {
    case MPU6050_RANGE_16G:            Serial.println("+/- 16 g"); break;
    case MPU6050_RANGE_8G:             Serial.println("+/- 8 g"); break;
    case MPU6050_RANGE_4G:             Serial.println("+/- 4 g"); break;
    case MPU6050_RANGE_2G:             Serial.println("+/- 2 g"); break;
  }

  Serial.print(" * Gyroscope:         ");
  switch (mpu.getScale())
  {
    case MPU6050_SCALE_2000DPS:        Serial.println("2000 dps"); break;
    case MPU6050_SCALE_1000DPS:        Serial.println("1000 dps"); break;
    case MPU6050_SCALE_500DPS:         Serial.println("500 dps"); break;
    case MPU6050_SCALE_250DPS:         Serial.println("250 dps"); break;
  }

  Serial.print(" * Gyroscope offsets: ");
  Serial.print(mpu.getGyroOffsetX());
  Serial.print(" / ");
  Serial.print(mpu.getGyroOffsetY());
  Serial.print(" / ");
  Serial.println(mpu.getGyroOffsetZ());

  Serial.println();


}*/
void loop()
{
  data.SW1 = 0;
  data.SW2 = 0;
  button1State = digitalRead(buttonPin1); //Reading the button status
  button2State = digitalRead(buttonPin2);
  if (button1State == HIGH){
    data.SW1 = 1; //Button 1 is pressed 
  }
  if (button2State == HIGH){
    data.SW2 = 1; //Button 2 is pressed
  }
  
    /* 12 data from MPU6050
     Accelermeter:
      RAW:  rawAccel.XAxis, rawAccel.YAxis, rawAccel.ZAxis
      NORM: normAccel.XAxis, normAccel.YAxis, normAccel.YAxis
     Gyroscope:
      RAW: rawGyro.XAxis, rawGyro.YAxis, rawGyroZAxis
      NORM: normGyro.XAxis, normGyro.YAxis, normGyro.ZAxis
    */
    
  /*Vector rawAccel = mpu.readRawAccel();
  //data.Ax = rawAccel.XAxis;
  //data.Ay = rawAccel.YAxis;
  //data.Az = rawAccel.ZAxis;
  Vector normAccel = mpu.readNormalizeAccel(); 
  data.Ax = normAccel.XAxis;
  data.Ay = normAccel.YAxis;
  //data.Az = normAccel.ZAxis; 
  Vector rawGyro = mpu.readRawGyro();
  //data.Gx = rawGyro.XAxis;
  //data.Gy = rawGyro.YAxis;
  //data.Gz = rawGyro.ZAxis;
  Vector normGyro = mpu.readNormalizeGyro();
  //data.Gx = normGyro.XAxis;
  //data.Gy = normGyro.YAxis;
  //data.Gz = normGyro.ZAxis;*/

  Serial.print("Button 1:");
  Serial.println(data.SW1);
  Serial.print("Button 2:");
  Serial.println(data.SW2);
  radio.write(&data, sizeof(data));  // Transmit data
 /* test.Ax = 100;
  test.Ay = 200;
  test.Az = 300;
  test.Gx = 400;
  test.Gy = 500;
  test.Gz = 600;
  rf24.write(&test, sizeof(test));  // Transmit data*/
  /*Serial.print(data.Ax);
  Serial.println("");
  Serial.print(data.Ay);
  Serial.println("");*/
  /*Serial.print(data.Az);
  Serial.println("");
  Serial.print(data.Gx);
  Serial.println("");
  Serial.print(data.Gy);
  Serial.println("");
  Serial.print(data.Gz);
  Serial.println("");*/


}
